package filetest;

import io.vertx.core.VertxException;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;

import static java.util.Arrays.asList;

@SpringBootApplication
public class FileTest {
    private static File cacheDir = new File(".vertx", UUID.randomUUID().toString());
    private static boolean ENABLE_CACHING = true;

    public static void main(String[] args) throws Exception {
        String fileName = "codegen.json";

        ClassLoader cl = FileTest.class.getClassLoader();
        URL url = cl.getResource(fileName);

        System.out.println(unpackFromJarURL(url, fileName));

        // Succeeds because it's in this jar
//        System.out.println(resolver.resolveFile("filetest/FileTest.class"));
        // Fails because it's in the vert.x core jar
//        System.out.println(resolver.resolveFile("codegen.json"));
    }

    private static synchronized  File unpackFromJarURL(URL url, String fileName) {
        String path = url.getPath();
        List<String> pathSegments = new LinkedList<>(asList(path.substring(5).split("\\.jar!")));
        try(ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(pathSegments.remove(0) + ".jar"))){
            unpackFromJar(zipInputStream, pathSegments, fileName);
        } catch(IOException e){
            throw new VertxException(e);
        }



        String jarFile = path.substring(5, path.lastIndexOf(".jar!") + 4);

        try {
            ZipFile zip = new ZipFile(jarFile);
            Enumeration<? extends ZipEntry> entries = zip.entries();
            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                String name = entry.getName();
                if (name.startsWith(fileName)) {
                    File file = new File(cacheDir, name);
                    if (name.endsWith("/")) {
                        // Directory
                        file.mkdirs();
                    } else {
                        file.getParentFile().mkdirs();
                        try (InputStream is = zip.getInputStream(entry)) {
                            if (ENABLE_CACHING) {
                                Files.copy(is, file.toPath());
                            } else {
                                Files.copy(is, file.toPath(), StandardCopyOption.REPLACE_EXISTING);
                            }
                        } catch (FileAlreadyExistsException ignore) {
                        }
                    }
                }
            }
        } catch (IOException e) {
            throw new VertxException(e);
        }

        return new File(cacheDir, fileName);
    }

    private static File unpackFromJar(ZipInputStream zipInputStream, List<String> pathSegments, String fileName) throws IOException {
        String pathSegment = pathSegments.remove(0);
        boolean leaf = !pathSegments.isEmpty();
        if (!leaf){
            pathSegment += ".jar";
        }
        ZipEntry entry;
        while ((entry = zipInputStream.getNextEntry()) != null){
            System.out.println(entry.getName());
            if (pathSegment.equals(entry.getName())){
                if (!leaf){
                    entry.si
                    return unpackFromJar()
                }
            }
            zipInputStream.
            zipInputStream.closeEntry();
        }
        return null;
    }

}
